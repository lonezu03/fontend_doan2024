public async Task<LoginResponse> LoginAsync(string email, string password)
{
    // Lấy người dùng theo email
    var user = await _userRepository.GetByEmailAsync(email);
    
    // Kiểm tra thông tin đăng nhập
    if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.Password))
    {
        return null; // Thông tin không hợp lệ
    }

    // Tạo token JWT
    var token = GenerateJwtToken(user);

    // Trả về thông tin người dùng kèm token
    return new LoginResponse
    {
        User = new UserResponse
        {
            Id = user.Id,
            Email = user.Email,
            Username = user.Username
        },
        Token = token.Token,
        Expiration = token.Expiration
    };
}

// Điều chỉnh để trả về JWT kèm thông tin người dùng
private LoginResponse GenerateJwtToken(User user)
{
    var jwtConfig = _configuration.GetSection("Jwt");
    var key = Encoding.UTF8.GetBytes(jwtConfig["Key"]);

    // Tạo claims
    var claims = new[]
    {
        new Claim(JwtRegisteredClaimNames.Sub, user.Email),
        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
        new Claim(ClaimTypes.Name, user.Username),
        new Claim("UserId", user.Id.ToString()) // Thêm claim tùy chỉnh nếu cần
    };

    // Signing credentials
    var signingKey = new SymmetricSecurityKey(key);
    var credentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256);

    // Token expiration
    var expires = DateTime.UtcNow.AddMinutes(double.Parse(jwtConfig["ExpiresInMinutes"]));

    var token = new JwtSecurityToken(
        issuer: jwtConfig["Issuer"],
        audience: jwtConfig["Audience"],
        claims: claims,
        expires: expires,
        signingCredentials: credentials);

    return new LoginResponse
    {
        Token = new JwtSecurityTokenHandler().WriteToken(token),
        Expiration = expires
    };
}
